<launch>

    <!-- Launch Gazebo simulation. -->
	<rosparam param="/use_sim_time">true</rosparam>
    <node pkg="aerialcore_simulation" type="launch_gzworld.py" name="gazebo_world" output="screen"
    args="-physics=ode -world=$(find aerialcore_simulation)/worlds/ATLAS_power_lines.world
		  -add_model_path=$(find aerialcore_simulation)/models
		  -description_package=robots_description">
		<rosparam param="sim_origin">[38.138728, -3.173825, 392.3]</rosparam>  <!-- [lat,lon,alt] -->
	</node>
    <!-- By default in the simulation the UAVs have an altitude of 51.7 meters according to MAVROS, but they should have 444, so I put the sim_origin at 392.3 -->
    <!-- Not really needed, but helpful if the UAVs start with a considerable z value (search for "TODO X" in mission_lib) -->

    <!-- Load yaml parameters. -->
    <rosparam file="$(find large_scale_inspection_planner_challenge)/config/planner_setup_ATLAS.yaml" command="load" />

    <!-- Argument mode for launching robots can be:
        - sitl: for software in the loop simulation
        - serial: for serial connection to px4
        - custom: to fully customize fcu and gcs urls
    -->
    <arg name="mode" default="sitl"/>

    <arg name="ns_uav_prefix" default="uav_"/>

    <!-- Launch robot id=1 -->
    <include file="$(find px4_bringup)/launch/spawn_robot.launch" ns="$(arg ns_uav_prefix)1">
        <arg name="id" value="1"/>
        <arg name="material" value="Orange"/>
        <arg name="mode" value="$(arg mode)"/>
        <arg name="x" value="28"/>
        <arg name="y" value="61"/>
        <arg name="z" value="0.32"/>
        <arg name="yaw" value="1.895919"/>
        <arg name="robot_model" value="mbzirc"/>
    </include>

    <!-- Launch robot id=2 -->
    <include file="$(find px4_bringup)/launch/spawn_robot.launch" ns="$(arg ns_uav_prefix)2">
        <arg name="id" value="2"/>
        <arg name="material" value="Orange"/>
        <arg name="mode" value="$(arg mode)"/>
        <arg name="x" value="38.8"/>
        <arg name="y" value="65"/>
        <arg name="z" value="0"/>
        <arg name="yaw" value="0.3"/>
        <arg name="robot_model" value="plane"/>
    </include>

    <!-- Launch robot id=3 -->
    <include file="$(find px4_bringup)/launch/spawn_robot.launch" ns="$(arg ns_uav_prefix)3">
        <arg name="id" value="3"/>
        <arg name="material" value="Orange"/>
        <arg name="mode" value="$(arg mode)"/>
        <arg name="x" value="32.5"/>
        <arg name="y" value="61"/>
        <arg name="z" value="0"/>
        <arg name="yaw" value="-1.261576"/>
        <arg name="robot_model" value="standard_vtol"/>
    </include>

    <!-- Use mission_lib for commanding UAVs (true) or output a yaml string for using the DJI SDK (false). -->
    <arg name="commanding_UAV_with_mission_lib_or_DJI_SDK" default="true"/>

    <!-- Parameters for the mission_lib. -->
    <arg name="pose_frame_id" default="map"/>
    <arg name="home_pose_parent_frame" default="map"/>

    <!-- Launch the Mission Controller. -->
	<node pkg="large_scale_inspection_planner_challenge" name="mission_controller" type="mission_controller" output="screen">
		<rosparam param="commanding_UAV_with_mission_lib_or_DJI_SDK" subst_value="true">$(arg commanding_UAV_with_mission_lib_or_DJI_SDK)</rosparam>

		<rosparam param="pose_frame_id" subst_value="true">$(arg pose_frame_id)</rosparam>
		<rosparam param="home_pose_parent_frame" subst_value="true">$(arg home_pose_parent_frame)</rosparam>
		<rosparam param="ns_uav_prefix" subst_value="true">$(arg ns_uav_prefix)</rosparam>
	</node>

</launch>
